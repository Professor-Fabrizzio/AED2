#include <stdio.h>
#include <stdlib.h>
#include "arvore.h"

#define esquerda 0
#define direita 1

void inicializar(No** a)
{
  (*a) = NULL;
}

int arvoreVazia(No** a)
{
  return ((*a) == NULL);
}

int menor(No** a){

  if ((*a) == NULL)
    return -1;
  else   
    if ((*a)->filho[esquerda] == NULL)
      return (*a)->chave;
    else
      return menor(&(*a)->filho[esquerda]);
}

No *criarNo(int chave){
  No *n = malloc(sizeof(No));
  n->chave = chave;
  n->filho[esquerda] = NULL;
  n->filho[direita] = NULL;
  return n;
}

void inserir(No** p, int chave)
{
  if ((*p) == NULL){
    (*p) = criarNo(chave);
  } else {    
    if (chave != (*p)->chave)
      if ((*p)->filho[(chave > (*p)->chave)] == NULL)
        (*p)->filho[(chave > (*p)->chave)] = criarNo(chave);
      else
        inserir(&((*p)->filho[chave > (*p)->chave]), chave);
    else { // chave == p->chave
      printf("Nó já existe!");
    }
  }
}

/* void inserir(No** *a, int chave)

No *removerSucessor(No *p, No *n)
{

  if (n->filho[esquerda] == NULL)
  {
    p->filho[n->chave > p->chave] = n->filho[direita];
    return n;
  }
  else
    return removerSucessor(n, n->filho[esquerda]);
}

No *removerNo(No *p, No *n, int chave)
{
  if (chave != n->chave)
    if (n->filho[(chave > n->chave)] == NULL)
      return NULL;
    else
      return removerNo(n, n->filho[(chave > n->chave)], chave);
  else // chave == n->chave
  {
    if ((n->filho[esquerda] == NULL) && (n->filho[direita] == NULL))
      p->filho[chave > p->chave] = NULL;
    else if (n->filho[esquerda] == NULL)
      p->filho[chave > p->chave] = n->filho[direita];
    else if (n->filho[direita] == NULL)
      p->filho[chave > p->chave] = n->filho[esquerda];
    else
    { // n->esquerda !=NULL && n->direita != NULL
      No *suc = removerSucessor(n, n->filho[direita]);
      suc->filho[esquerda] = n->filho[esquerda];
      suc->filho[direita] = n->filho[direita];
      if (chave < p->chave)
        p->filho[esquerda] = suc;
      else
        p->filho[direita] = suc;
    }
    return n;
  }
}

int remover(No** *a, int chave)
{
  int i = -1;
  No *aux = NULL;
  if (a->raiz == NULL) return 0;

  if (a->raiz->chave != chave)
    aux = removerNo(a->raiz, a->raiz->filho[(chave > a->raiz->chave)], chave);
  else // raiz->chave == chave
  {
    aux = a->raiz;
    if ((a->raiz->filho[esquerda] == NULL) || (a->raiz->filho[direita] == NULL))
      a->raiz = a->raiz->filho[(a->raiz->filho[esquerda] == NULL)];
    else
    { // raiz->esquerda != NULL && raiz->direita != NULL
      No *suc = removerSucessor(a->raiz, a->raiz->filho[direita]);
      suc->filho[esquerda] = a->raiz->filho[esquerda];
      suc->filho[direita] = a->raiz->filho[direita];
      a->raiz = suc;
    }
  }

  if (aux != NULL)  {
    i = aux->chave;
    free(aux);
  } else
    printf("Chave não encontrada!");

  return i;
} */
